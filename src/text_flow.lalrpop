use std::str::FromStr;
use crate::ast::{Expr, Value, Op, Control};
use crate::utils::{b, slice_end_str};

grammar;

pub Exprs = Breaks<Expr>;

Expr = WithCodePos<Operation>;

PriorityExpr: Box<Expr> = {
    WithCodePos<Value>,
    WithCodePos<FuncDef>,
    WithCodePos<FuncCall>,
    WithCodePos<Get>,
    WithCodePos<List>,
    WithCodePos<Block>,
    WithCodePos<VariableAndControl>,
}

Breaks<T>: Vec<T> = {
    (<T> ";")*,
    <mut v: (<T> ";")+> <t: T> => {
        v.push(t);
        v
    },
    T => vec![<>]
};

Block: Box<Expr> = {
    "{" <Exprs> "}" => b(Expr::Block(<>))
};

WithCodePos<T>: Box<Expr> = {
    <start: @L> <e: T> <end: @R> => b(Expr::ExprWithCodePos{exp: e, start, end})
}

FuncCall: Box<Expr> = {
    <f: PriorityExpr> "[" <mut pv: (<Expr> ",")*> <p: Expr?> "]" => {
        p.map(|x|pv.push(x));
        b(Expr::FuncCall{func: f, arguments: pv})
    }
}

FuncDef: Box<Expr> = {
    "f" "[" <mut pv: (<Identifier> ",")*> <p: Identifier?> "]" <body: Block> => {
        p.map(|x|pv.push(x));
        b(Expr::FuncDef{parameters: pv, body})
    }
}

Get: Box<Expr> = {
    <e: PriorityExpr> "." <i: VariableAndControl> => b(Expr::Get{from: e, key: i, is_expr: false}),
    <e: PriorityExpr> "." <s: Str> => b(Expr::Get{from: e, key: b(Expr::Value(s)), is_expr: false}),
    <e: PriorityExpr> "." <n: Num64> => b(Expr::Get{from: e, key: b(Expr::Value(n)), is_expr: false}),
    <e: PriorityExpr> "." <n: Num128> => b(Expr::Get{from: e, key: b(Expr::Value(n)), is_expr: false}),
    <e: PriorityExpr> "." "(" <t: Term> ")" => b(Expr::Get{from: e, key: t, is_expr: true})
}

Num64: Value = {
    r"\d{1,17}" => Value::Int64(i64::from_str(<>).unwrap())
};

Num128: Value = {
    r"\d{18,}" => Value::Int128(i128::from_str(<>).unwrap())
};

Str: Value = {
    r"'[^']*'" => Value::String(b(slice_end_str(String::from(<>), 1, 1))),
    r#""[^"]*""# => Value::String(b(slice_end_str(String::from(<>), 1, 1)))
}

Regex: Value = {
    r"/[^/]*/" => Value::Regex(b(slice_end_str(String::from(<>), 1, 1)))
}

List: Box<Expr> = {
    "[" <mut iv: (<Expr> ",")*> <i: Expr> "]" => {
        iv.push(i);
        b(Expr::List(iv))
    },
    "[" "]" => b(Expr::List(vec![]))
}

Value: Box<Expr> = {
    Str => b(Expr::Value(<>)),
    Regex => b(Expr::Value(<>)),
    Num64 => b(Expr::Value(<>)),
    Num128 => b(Expr::Value(<>))
}

VariableAndControl: Box<Expr> = {
    Identifier => {
        match <>.as_str() {
            "ignore" => b(Expr::Control(Control::Ignore)),
            "break" => b(Expr::Control(Control::Break)),
            _ => b(Expr::Variable(<>))
        }
    }
}

Identifier: Box<String> = {
    r"[$_a-zA-Z]+[$_\d\w]*" => b(String::from(<>)),
}

Operation: Box<Expr> = {
    <op: Op1> <e: PriorityExpr> => b(Expr::Op1{op, x: e}),
    <x: Operation> <op: Op2> <y: PriorityOperation> => b(Expr::Op2{op, x, y}),
    PriorityOperation
}

PriorityOperation: Box<Expr> = {
    <x: PriorityOperation> <op: PriorityOp2> <y: PPriorityOperation> => b(Expr::Op2{op, x, y}),
    PPriorityOperation
}

PPriorityOperation: Box<Expr> = {
     <x: PPriorityOperation> <op: PPriorityOp2> <y: PPPriorityOperation> => b(Expr::Op2{op, x, y}),
     PPPriorityOperation
}

PPPriorityOperation: Box<Expr> = {
     Term,
     <x: PPPriorityOperation> <op: PPPriorityOp2> <y: Term> => b(Expr::Op2{op, x, y}),
}

Op1: Op = {
    "!" => Op::Not,
    "~" => Op::BNot,
    "-" => Op::Neg
}

Op2: Op = {
    "==" => Op::Eq,
    "!=" => Op::Ne,
    "=" => Op::Assign,
    "&&" => Op::And,
    "||" => Op::Or,
    "|" => Op::BOr,
    "&" => Op::BAnd
}

PriorityOp2: Op = {
    ">" => Op::Gt,
    ">=" => Op::Ge,
    "<" => Op::Lt,
    "<=" => Op::Le,
}

PPriorityOp2: Op = {
    "+" => Op::Add,
    "-" => Op::Sub,
    "-<" => Op::Map,
    ">-" => Op::Collect,
    ">>-" => Op::AsyncMap
}

PPPriorityOp2: Op = {
    "*" => Op::Mul,
    "/" => Op::Div
}

Term: Box<Expr> = {
    "(" <t: Operation> ")" => t,
    PriorityExpr
}
