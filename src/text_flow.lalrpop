use std::str::FromStr;
use crate::ast::{Expr, Value, Op, Control};
use crate::utils::{b};

grammar;

pub Exprs = Breaks<Expr>;

Expr = WithCodePos<Operation>;

PriorityExpr: Box<Expr> = {
    WithCodePos<Value>,
    WithCodePos<FuncDef>,
    WithCodePos<FuncCall>,
    WithCodePos<Get>,
    WithCodePos<List>,
    WithCodePos<Block>,
    WithCodePos<VariableAndControl>,
}

Term<T>: T = {
    "(" <T> ")",
    T
}

Breaks<T>: Vec<T> = {
    (<T> ";")*,
    <mut v: (<T> ";")+> <t: T> => {
        v.push(t);
        v
    },
    T => vec![<>]
};

Block: Box<Expr> = {
    "{" <Exprs> "}" => b(Expr::Block(<>))
};

WithCodePos<T>: Box<Expr> = {
    <start:@L> <e:T> <end:@R> => b(Expr::ExprWithCodePos{exp: e, start, end})
}

FuncCall: Box<Expr> = {
    <f:PriorityExpr> "[" <mut pv:(<Expr> ",")*> <p: Expr?> "]" => {
        p.map(|x|pv.push(x));
        b(Expr::FuncCall{func: f, parameters: pv})
    }
}

FuncDef: Box<Expr> = {
    "f" "[" <mut pv:(<Identifier> ",")*> <p: Identifier?> "]" <body: Block> => {
        p.map(|x|pv.push(x));
        b(Expr::FuncDef{parameters: pv, body})
    }
}

Get: Box<Expr> = {
    <e:PriorityExpr> "." <i:Identifier> => b(Expr::Get{from: e,key: i})
}

Num64: Value = {
    r"\d{1,17}" => Value::Int64(i64::from_str(<>).unwrap())
};

Num128: Value = {
    r"\d{18,}" => Value::Int128(i128::from_str(<>).unwrap())
};

Str: Value = {
    r"'[^']*'" => Value::String(b(String::from(<>))),
    r#""[^"]*""# => Value::String(b(String::from(<>)))
}

Regex: Value = {
    r"/[^/]*/" => Value::Regex(b(String::from(<>)))
}

List: Box<Expr> = {
    "[" <mut iv:(<Expr> ",")*> <i:Expr> "]" => {
        iv.push(i);
        b(Expr::List(iv))
    }
}

Value: Box<Expr> = {
    Str => b(Expr::Value(<>)),
    Regex => b(Expr::Value(<>)),
    Num64 => b(Expr::Value(<>)),
    Num128 => b(Expr::Value(<>))
}

VariableAndControl: Box<Expr> = {
    Identifier => {
        match <>.as_str() {
            "ignore" => b(Expr::Control(Control::Ignore)),
            "break" => b(Expr::Control(Control::Break)),
            _ => b(Expr::Variable(<>))
        }
    }
}

Identifier: Box<String> = {
    r"[$_a-zA-Z]+[$_\d\w]*" => b(String::from(<>)),
}

Operation: Box<Expr> = {
    <op: Op1> <e: PriorityExpr> => b(Expr::Op1{op, x: e}),
    <x: Operation> <op: Op2> <y: PriorityExpr> => b(Expr::Op2{op, x, y}),
    PriorityExpr
}

Op1: Op = {
    "!" => Op::Not,
    "~" => Op::BNot
}

Op2: Op = {
    "+" => Op::Add,
    ">" => Op::Map,
    ">|" => Op::AsyncMap,
    "==" => Op::Eq,
    "<" => Op::Collect,
    "=" => Op::Assign,
    "&&" => Op::And,
    "||" => Op::Or,
    "|" => Op::BOr,
    "&" => Op::BAnd
}
